---
jupyter: python3
execute: 
  freeze: auto
  cache: true
---



# Strings

[Jupyter Notebook](https://raw.githubusercontent.com/lancejnelson/PH135/refs/heads/master/jupyter/strings.ipynb)


Another commonly-used type of data is a string of characters known simply as *strings*.  Strings can contain a variety of characters including letters, numbers, and symbols.  

## Creating Strings

Strings are created by placing the sequence of characters in single (or double) quotes.

```{python}
text = "some text"
```

Strings can also be created by converting a float or an integer into a string using the `str()` function.

```{python}
text = str(4.5)
```

One common error made when working with strings is to attempt to perform math with them. Python will not perform math with strings because it sees them as a series of characters and nothing more. In the cell below, we attempt to perform math with some strings.

```{python}
#| echo: true
#| eval: false

a = "4"
b = "2"
c = 5

d = a + b
e = a * b
f = b * c
```

>**_To Do:_**
>
>1. Use print statements in the cell above to determine what happens when you add two strings together. (Ancillary question: Can you subtract strings?)
>2. Use print statements in the cell above to determine what happens when you multiply two strings.
>3. Use print statements in the cell above to determine what happens when you multiply a string and an integer.
>4. What do you think will happen if you multiplied a string and a float?  Guess and then see if you're right.
>5. Add comments for you to refer back to later.

```{python}
# Python Code Here!
```

If you want to know the length of a string, you can use the `len()` function

```{python}
text = "some text"
len(text)
```

The length of the string above is 9 because a space is a valid character.

## Displaying text and numbers together

You have been using `print()` statements quite a lot lately (hopefully) but you probably haven't printed text and numbers together.  To display both text and numbers in the same message, there are several options.  The first is to just put multiple variables into the `print()` function, separating them with commas.

```{python}
g = 9.8
unit = "m/s^2"
print(g,unit)
```

Another option is to convert the number to a string and then "add" it to the other string. This creates a single string as an argument to the `print()` function.

```{python}
g = 9.8
unit = "m/s^2"
print(str(g) + unit)
```

Notice the lack of space between the number and the unit.  "Adding" the two strings smashed them together exactly as they were, no spaces added. You can insert multiple numbers into a string using something called "f"-strings. (short for formatted strings). To construct an f-string, simply place an "f" in front of the string.  Anytime you want to insert a number in your string, enclose it in curly braces.

```{python}
v = 5.0
c = 3e8
print(f"The speed of light is {c} and the speed of my car is {v}")
```


Thatâ€™s a clever way to insert a numerical value into a string, but the value of the speed of light is still displaying too many digits. To specify how the number should be formatted place a `:` after the variable name followed by a formatting tag. 
```{python}
v1 = 5.0
v2 = 8.3
c = 2.998e8
n = 2

print(f"There are {n:d} cars traveling side by side.  One car is traveling at {v1:4.2f} m/s and the other is traveling at {v2:4.2f} m/s.  Those speeds are much smaller than the speed of light, which is {c:.2e} m/s") 
```

The structure of the stuff inside of the curly braces is `{variable:formatcode}`; `variable` holds the value to be displayed and `formatcode` indicates how the variable should be formatted when it is printed. The `f` in  `:4.2f` indicates that the variable should be displayed as a float and the `4.2` indicates that four spaces should be allocated to display the number and no more than 2 numbers after the decimal should be displayed. A selection of some commonly-used format codes is given below.


| format code| explanation|
|------------|------------|
|`{variable}`        | Use the default format for the data type.|
|`{variable:4d}`        | Display as an integer, allocating 4 spaces for it.|
|`{variable:.4f}`        | Display as a float, with four numbers after the decimal being displayed.|
|`{variable:8.4f}`        | Display as a float, allocating 8 total spaces and 4 numbers after the decimal place.|
|`{variable:8.4e}`        | Display using scientific notation, allocating 8 total spaces and 4 numbers after the decimal place.|
|`{variable:6s}`        | Display as a string, allocating 6 total spaces for it.  If the string is longer than 6 spaces, it will display the entire string with no extra white space.  If the string is shorter than 6 spaces, it will pad the string with whitespace until it is 6 spaces long.|

: A summary of common format codes.

>**_To Do:_**
>
>1. Modify the print statement above so that the float variables are given 8 total spaces with only 1 number after the decimal being displayed.
>2. Modify the print statement above so that the speed of light is displayed with 3 numbers after the decimal place.

```{python}
# Python Code Here!
```


## Indexing and Slicing

  Accessing a piece (or slice) of a string is a common task in scientific computing. Often you will import data into Python from a text file and need to extract a portion of the file for later use in calculations.  Indexing allows the user to extract a single element, or character, from a string. The key detail about indexing in Python is that *indices start from zero*.  That means that the first character is index zero, the second character is index 1, and so on.  For example, maybe a string contains the following amino acid sequence 'MSLFKIRMPE'.  For this example, the indices are as follows:
  
| **Characters**|M|S|L|F|K|I|R|M|P|E|
| --------------- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- |
| **Index** | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
  
  
  

To access a single character from a string, place the desired index in square brackets after the name of the string.

```{python}
seq = "MSLFKIRMPE"
seq[0]
```

To access the last character in a string you could do

```{python}
seq = "MSLFKIRMPI"
seq[len(seq) - 1]
```

But this seems overly cumbersome. An easier approach is to index backwards.  The string can be reverse indexed from the last character to the first using negative indices, starting with -1 as the last charcter.

```{python}
seq = "MSLFKIRMPE"
seq[-1]
```

>**_To Do:_**
>
>1. Access the 5th character in the peptide sequence above.
>2. Access the character that is 3rd from the end in the peptide sequence above.

```{python}
# Python Code Here!
```

Indexing only provides a single character, but it is common to want a series of characters from a string.  *Slicing* allows us to grab a section of a string. Slicing is performed by specifying start and stop indices separated by a colon in the square brackets.  One important detail worth mentioning: the character at the starting index is included in the slice while the character located at the final index *is not* included in the slice.

```{python}
seq = "MSLFKIRMPE"
seq[0:5]
```

Looking at the string, you notice that the character at location 5 (I) has been excluded from the slice.  You can leave off the first number when slicing and the slice will  start at the beginning of the string.

```{python}
seq = "MSLFKIRMPE"
seq[:5]
```

You can also use negative indices when slicing.  This is especially helpful when you want to grab the last few characters in a string.

```{python}
file = "data.txt"
ext = file[-3:]
print(ext)
```

Finally, we can adjust the step size in the slice.  That is, we can ask for every other character in the string by setting a step size of 2.  The structure of the slice is [start,stop,step].

```{python}
seq = "MSLFKIRMPE"
seq[0:8:2]
```

You can omit the start and stop indices and Python will assume that you are slicing the entire string.

```{python}
seq = "MSLFKIRMPE"
seq[::2]
```

## String Methods

A *method* is a function that works only with a specific type of object. String methods only work on strings, and they don't work on other types of objects, like floats or ints. If it helps you, you can just think of a method as a function.  

One example of a string method is the `capitalize()` function which returns a string with the first letter capitalized.  To use a method (referred to as *calling* the method), the method name is appended to the variable you want it to operate on.  For example, below is an Albert Einstein quote that needs capitalized.

```{python}
quote = "i want to know God's thoughts. The rest are details."
quote.capitalize()
print(quote)
```

Notice that the original variable (quote) remains unchanged.  This particular method does not change the value of the original string but rather returns a capitalized version of it.  If we want to save the capitalized version, we can assign it to a new variable, or overwrite the original.

```{python}
quote = "i want to know God's thoughts. The rest are details"
quote = quote.capitalize()
print(quote)
```

In the cell below you will find a list of commonly-used string methods.

```{python}
a = "spdfgssfpggg"
a.capitalize()
a.center(10)
a.count("s")
a.find("d")
a.isalnum()
a.isalpha()
a.isdigit()
a.lstrip("s")
a.rstrip("g")
a.split("s")
a.replace("sss","ggg")
a.startswith("s")
a.endswith("p")

separator = ","
separator.join(["hydrogen", "nitrogen", "oxygen"])

```


>**_To Do:_**
>
>1. Use well-placed print statements to determine what each string method does.
>2. Add comments next to each method for future reference.
>
```{python}
# Python Code Here!
```






