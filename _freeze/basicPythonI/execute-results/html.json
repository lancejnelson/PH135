{
  "hash": "c0fe173592af5cf46c968fdbbe18ba35",
  "result": {
    "markdown": "---\nformat: html\ntoc: true\n---\n\n# Variables and Numbers\n\n## Variables\n\nWhen performing mathematical operations, it is often desirable to store the values in *variables* for later use instead of manually typing them back in each time you need to use them.  This will reduce effort because small changes to variables can automatically propagate through your calculations.  \n\nAttaching a value to a variable is called *assignment* and is performed using the equal sign (=), as demonstrated in the cell below:\n\n``` {.python .cell-code}\na = 5.0\nb = 3\nc = a + b\n```\n\n\n### Variable naming convention\n\nThere are some rules for allowed variable names in Python.  They are as follows:\n\n1. Variable names must begin with a letter or an underscore (`_`)\n2. Variables names must only contain letters, numbers, and underscores.\n3. Variable names cannot contain spaces.\n4. Variables names cannot be a word reserved by Python for something else.  These words are:\n\n|  | Python  | reserved |words | | \n|-----|-----|-----|------|--------|\n|and | as |assert | break | class |\n|continue | def |del | elif | else |\n|except | False |finally | for | from |\n|global | if |import | in | is |\n|lambda | None |nonlocal | not | or |\n|pass | raise |return | True | try |\n|why | with |yield |  |  |\n\n\nThe cell below contains some allowed variable names and some that are not allowed.\n\n\n>**_To Do:_**\n>\n>1. Determine which variable names are allowed and which are not in the cell below.\n>2. What does Python do if you try to define a variable using a name that is not allowed?\n\n``` {.python .cell-code}\nmy1variable = 3\n1stvariables = 2\na big constant = 3\na_big_constant = 1e8\n```\n\n\nIt is also a good practice to make variable names meaningful. For example, in the cell below we calculate $E = mc^2$ using two choices for variable assignments. In one case, it is easy to determine what the calculation is and in the other it isn't.\n\n``` {.python .cell-code}\n# Good Variable Names\nmass_kg = 1.6\nlight_speed = 3.0e8\nE = mass_kg * light_speed**2\n\n\n# Poor Variable Names\na = 1.6\nb = 3.0e8\nc = a * b**2\n\n```\n\n\n### Numbers: Integers and Floats\n\nThere are two types of numbers in Python - floats and integers. *Floats*, short for \"floating point numbers,\" are values with decimals in them.  They may be either whole or non-whole numbers such as 3.0 or 1.2, but there is always a decimal point. *Integers* are whole numbers with no decimal point such as 2 or 53.\n\nMathematical operations that only use integers *and* evaluate to a whole number will generate an integers (except for division).  All other situations will generate a float.  See the example cell below.\n\n``` {.python .cell-code}\na = 24\nb = 6\nd = 0.3\ne = a + b # Produces an integer.\nf = a + d # Produces a float\ng = a * b # Produces a ???\nh = a / b # Produces a ???\n```\n\n\nIntegers and floats can be interconverted to each other using the `int()` and `float()` functions.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nint(3.0)\nfloat(4)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n4.0\n```\n:::\n:::\n\n\nThe distinction between floats and ints is often a minor detail. Occasionally, a function will require that an argument be a float or an int but usually you won't have to worry about which one you use.\n\nBelow you will find some other common mathematical operations that can be performed on numerical variables. \n\n``` {.python .cell-code}\na = 20\nb = 10\nc = a + b \nd = a/b  \nr = a//b\nr = a % b\ne = a * b\nf = c**4\n```\n\n\n>**To Do:**\n>\n>1. Use print statements to investigate what each operation does.  \n>2. Can you force each operation to produce a float and an integer?\n>3. Add comments next to each line (Use `#` to start a comment) explaining that operation. \n\n\n\n\n### Augmented Assignment\n\nAugmented assignment is a shortened way to make a simple modification to a variable. For example, if we want to increase the value of a variable by 10, one way to do it would be like this.\n\n``` {.python .cell-code}\na = 5\na = a + 10\n```\n\n\nThis is certainly not difficult, but it does involve typing the variable twice which becomes cumbersome as your variable name gets longer.  Alternatively, we can accomplish the same thing with the `+=` operator.\n\n``` {.python .cell-code}\na = 5\na += 10\n```\n\n\nAugmented assignment can be used with addition, subtraction, multiplication, and division as shown in the code cell below.\n\n\n>**_To Do:_**\n>\n>1. Predict what the final result of a will be in the code cell below.\n>2. Add an appropriately-place print statement to see if you were correct.\n>3. If you were wrong, pow-wow with your neighbor until you understand.\n\n``` {.python .cell-code}\na = 7\na += 3\na -= 1\na *= 4\na /= 3\n```\n\n\n### Compound Assignment\n\nAt the beginning of a program or calculation, it is often necessary to define a set of variables. Each variable may get it's own line of code, but if there are a lot of variables, this can begin to clutter your code a little.  An alternative is to assign multiple variables on a single line.  In the code below, we assign the atomic mass of the first three elements.\n\n``` {.python .cell-code}\nH, He, Li = 1.01, 4.00, 5.39\n```\n\n\n>**_To Do:_**\n>\n>1. Use print statements to verify that each variable was assigned it's own value.\n>2. Add assignments for the atomic masses of the next three elements on the periodic table.\n\n### Large numbers\n\nSometimes you find yourself working with large numbers in your calculation. Maybe your calculation involves the use of ten billion, which has 10 zeros in it.  It can be difficult to look at all of those zeros with no commas to help break it up.  In those cases, you can use an underscore (`_`) in place of the comma, as shown below.  \n\n``` {.python .cell-code}\nmyLargeNumber = 10000000000 # This is tough to look at.\nmyLargeNumber = 10_000_000_000  # This is easy to read\n\nmyLargeFloat = 5000000.6 # This is tough to read\nmyLargeFloat = 5_000_000.6 # This is easy to read\n```\n\n\n### Very Large Numbers\nIf your number is very large or very small ( $20-30$ zeros), you would probably rather not have to type all of the zeros at all, even if you can break it up with the underscores.  For example, the Boltzman constant, which comes up in thermodynamics, has a value equal to  \n\n\n\n$$ 1.38 \\times 10^{-23}$$ \n\n\n\nWe can avoid typing all those zeros by using scientific notation when defining the variable. (see example below)  This is super handy for very large and very small number.  (Numbers of both variety show up frequently in physics!)\n\n``` {.python .cell-code}\nkB = 1.38e-23\n```\n\n\n### Python functions\n\nIn addition to basic mathematical functions, python contains several mathematical *functions*.  As in mathematics, a function has a name (e.g. *f*) and the arguments are places inside of the parenthesis after the name.  The *argument* is any value or piece of information fed into the function.  In the case below, *f* requires a single argument *x*.\n\n\n$$f(x)$$\n\n\n\nIn the cell below, you will find several useful math equations.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nabs(-5.5)\nfloat(2)\nint(5.6)\nprint(1.26e-6)\nround(-5.51)\nstr(3.2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.26e-06\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n'3.2'\n```\n:::\n:::\n\n\nIn addition to Python's native collection of mathematical functions, there is also a `math` module with more mathematical functions.  Think of a module as an add-on or tool pack for Python just like a library.  The `math` module comes with every installation of python and can be *imported* (i.e. activated) using the `import math` command. After the module has been imported, any function in the module is called using `math.function()` where `function` is the name of the function.  Here is a list of commonly-used function inside the `math module`:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nimport math\nmath.sqrt(4)\nmath.ceil(4.3)\nmath.cos(1.5)\nmath.sin(1.5)\nmath.degrees(6.28)\nmath.e\nmath.exp(5)\nmath.factorial(4)\nmath.log(200)\nmath.log10(1000)\nmath.radians(360)\nmath.tan(3.14)\nmath.pi\nmath.pow(2,8)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n256.0\n```\n:::\n:::\n\n\n>**_To Do:_**\n>\n>1. Use print statements to figure out what each function in the code cell above does.   Pay special attention to trigonometric function.  Do these functions expect the argument to be in radians or degrees? \n>2. Add comments to remind yourself for later.\n\n\nThere are other ways to import functions from modules. If you only wan to use a single function inside the module, you can selectively import it using `from`, as shown below.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nfrom math import radians\nradians(4)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n0.06981317007977318\n```\n:::\n:::\n\n\n## Exercises\n\n\n1. Calculate the distance from the origin to the point $(23,81)$ usign the `math.hypot()` function and then using the following distance equation:\n\n\n\n$$ d = \\sqrt{\\Delta x^2 + \\Delta y^2}$$\n\n\n\n2. Solve the quadratic equation using the quadratic function below for $a = 1$, $b = 2$, and $c = 1$.\n\n\n\n$$ x = {- b \\pm \\sqrt{b^2 - 4 a c} \\over 2a}  $$\n\n\n\n(Optics Application) 3. When light encounters an interface between two different object, the light bends as it proceeds into the second material.  The index of refraction (n) determines how much bending happens. Bending is greater for materials with a bigger index of refraction.\n\n",
    "supporting": [
      "basicPythonI_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}